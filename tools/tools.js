const path = require("path")
const fs = require("fs")
const util = require("util")
const si = require('systeminformation')

function mergeConfig(result) {
  var stack = Array.prototype.slice.call(arguments, 1)
  var item
  var key
  while (stack.length) {
    item = stack.shift()
    for (key in item) {
      if (item.hasOwnProperty(key)) {
        if (
          typeof result[key] === "object" && result[key]
          && Object.prototype.toString.call(result[key]) !== "[object Array]"
        ) {
          if (typeof item[key] === "object" && item[key] !== null) {
            result[key] = mergeConfig({}, result[key], item[key])
          } else {
            result[key] = item[key]
          }
        } else {
          result[key] = item[key]
        }
      }
    }
  }
  return result
}

function stringToBool(string) {
  switch(string.toLowerCase().trim())
  {
    case true:
    case "true":
    case "yes":
    case 1:
      return true;
    case false:
    case "false":
    case "no":
    case 0:
    case null:
      return false;
    default:
      return false;
  }
}

/** convert string to Array **/
function stringToArray(string) {
  if (string) return string.split(',')
  else return []
}

function saveConfig(MMConfig, debug) {
  /** Part of MMM-Remote-control module (simplified) **/
  var log = (...args) => { /* do nothing */ }
  if (debug) log = (...args) => { console.log("[GATEWAY][SAVE]", ...args) }
  var backupHistorySize = 5
  var configPath = path.resolve("../../config/config.js")

  var best = -1
  var bestTime = null
  for (var i = backupHistorySize - 1; i > 0; i--) {
    let backupPath = path.resolve("backup/config.js.backup" + i)
    try {
      var stats = fs.statSync(backupPath)
      if (best === -1 || stats.mtime < bestTime) {
        best = i
        bestTime = stats.mtime
      }
    } catch (e) {
      if (e.code === "ENOENT") {
        best = i
        bestTime = "0000-00-00T00:00:00Z"
      }
    }
  }
  if (best === -1) return console.log("[GATEWAY] Error! Backing up config failed, not saving!")

  let backupPath = path.resolve("backup/config.js.backup" + best)
  var source = fs.createReadStream(configPath)
  var destination = fs.createWriteStream(backupPath)

  source.pipe(destination, { end: false })
  source.on("end", () => {
    var header = "/*** GENERATED BY @bugsounet Gateway ***/\n\nvar config = \n"
    var footer = "\n\n/*************** DO NOT EDIT THE LINE BELOW ***************/\nif (typeof module !== 'undefined') {module.exports = config;}\n"

    fs.writeFile(configPath, header + util.inspect(MMConfig, {
        showHidden: false,
        depth: null,
        maxArrayLength: null,
        compact: false
      }) + footer,
      (error) => {
        if (error) return console.error("error", error)
        console.log("EXT-Setup saved new config!")
        log("Used backup: " + backupPath)
      }
    )
  })
}

function getIP () {
  return new Promise((resolve) => {
    si.networkInterfaceDefault()
      .then(defaultInt=> {
        si.networkInterfaces().then(data => {
          var Interfaces= []
          var int =0
          data.forEach(interface => {
            var info = {}
            if (interface.type == "wireless") {
              info = {
                ip: interface.ip4 ? interface.ip4 : "unknow",
                default: (interface.iface == defaultInt) ? true: false
              }
            }
            if (interface.type == "wired") {
              info = {
                ip: interface.ip4 ? interface.ip4 : "unknow",
                default: (interface.iface == defaultInt) ? true: false
              }
            }
            if (interface.iface != "lo") Interfaces.push(info)
            if (int == data.length-1) resolve(Interfaces)
            else int +=1
          })
        })
      })
      .catch(error => {
        console.log(error)
        var info = {}
        info = {
          ip: "127.0.0.1",
          default: true
        }
        Interfaces.push(info)
        resolve(Interfaces)
      })
  })
}

exports.mergeConfig = mergeConfig
exports.stringToBool = stringToBool
exports.stringToArray = stringToArray
exports.saveConfig = saveConfig
exports.getIP = getIP
